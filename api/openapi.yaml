openapi: 3.0.1
info:
  title: Arlington Vote Transparency
  description: 'This is a sample server Petstore server.  You can find out more about     Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For
    this sample, you can use the api key `special-key` to test the authorization     filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  version: 1.0.0
tags:
- name: avt
  description: Arlington Vote Transparency
paths:
  /v1/representatives:
    get:
      tags:
      - avt
      parameters:
      - name: precincts
        in: query
        description: CSV list of precincts the user is interested in, or all if empty
        schema:
          type: array
          items:
            type: integer
      description: Get representative data
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Representative'
  /v1/representatives/history:
    get:
      tags:
      - avt
      parameters:
      - name: precincts
        in: query
        description: CSV precincts the user is interested in, or all if empty
        schema:
          type: array
          items:
            type: integer
      description: Get all representatives' voting history
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VoteHistory'
  /v1/articles:
    get:
      tags:
      - avt
      description: Get all articles that received votes
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Article'
components:
  schemas:
    Representative:
      type: object
      properties:
        fullName:
          type: string
        precinct:
          type: integer
    VoteHistory:
      type: object
      properties:
        representative:
          $ref: '#/components/schemas/Representative'
        votes:
          type: array
          items:
            $ref: '#/components/schemas/ArticleVote'
    ArticleVote:
      type: object
      properties:
        article:
          $ref: '#/components/schemas/Article'
        infoUrl:
          type: string
          description: Link off to some external source for info
        vote:
          enum:
          - 'yes'
          - 'no'
          - 'abstain'
          - 'no data'
        amendmentVotes:
          type: array
          items:
            $ref: '#/components/schemas/AmendmentVote'
    AmendmentVote:
      properties:
        amendmentId:
          type: integer
        vote:
          enum:
          - 'yes'
          - 'no'
          - 'abstain'
          - 'no data'
    Article:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        amendments:
          type: array
          items:
            $ref: '#/components/schemas/Amendment'
    Amendment:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
